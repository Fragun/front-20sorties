{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Link, Navigate, useNavigate } from \"react-router-dom\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwt_decode from \"jwt-decode\";\nimport FacebookLogin from \"react-facebook-login\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SignIn() {\n  _s();\n  const {\n    signin,\n    user,\n    userFacebook,\n    userGoogle\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Email non valide\").required(\"Ce champ doit être saisi\"),\n    password: Yup.string().required(\"Required\").min(6, \"Le mot de passe doit contenir 6 caractères min.\")\n  });\n  const initialValues = {\n    email: \"\",\n    password: \"\"\n  };\n  const {\n    handleSubmit,\n    register,\n    formState: {\n      errors,\n      isSubmitting\n    },\n    setError,\n    clearErrors\n  } = useForm({\n    initialValues,\n    resolver: yupResolver(validationSchema)\n  });\n  const submit = handleSubmit(async values => {\n    try {\n      clearErrors();\n      await signin(values);\n      navigate(\"/\");\n    } catch (message) {\n      setError(\"generic\", {\n        type: \"generic\",\n        message\n      });\n    }\n  });\n\n  /**\r\n   * fonction qui est appelée lorsque la connexion avec Google réussit. \r\n   * Elle récupère le jeton d'authentification (googleToken), le décode en utilisant jwt_decode,\r\n   *  masque le bouton de connexion Google, stocke le décodage du jeton dans le stockage local\r\n   * et recharge la page pour mettre à jour l'état de l'authentification.\r\n   *\r\n   * @param {*} credentialResponse \r\n   */\n  const handleGoogleLoginSuccess = credentialResponse => {\n    let googleToken = credentialResponse.credential;\n    let decoded = jwt_decode(googleToken);\n    document.getElementById(\"signInGoogle\").hidden = true;\n    localStorage.setItem(\"userGoogle\", JSON.stringify(decoded));\n    window.location.reload();\n  };\n  const responseFacebook = response => {\n    window.location.reload();\n  };\n  const handleGoogleLoginError = () => {\n    console.log(\"Login Failed\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(SignIn, \"Nl9A31RnRtpzsQCh7yxF0OhRo6s=\", false, function () {\n  return [useNavigate, useForm];\n});\n_c = SignIn;\nvar _c;\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"names":["React","useContext","useForm","Yup","AuthContext","yupResolver","Link","Navigate","useNavigate","GoogleLogin","jwt_decode","FacebookLogin","Fragment","_Fragment","jsxDEV","_jsxDEV","SignIn","_s","signin","user","userFacebook","userGoogle","navigate","validationSchema","object","shape","email","string","required","password","min","initialValues","handleSubmit","register","formState","errors","isSubmitting","setError","clearErrors","resolver","submit","values","message","type","handleGoogleLoginSuccess","credentialResponse","googleToken","credential","decoded","document","getElementById","hidden","localStorage","setItem","JSON","stringify","window","location","reload","responseFacebook","response","handleGoogleLoginError","console","log","_c","$RefreshReg$"],"sources":["C:/Users/PCD DELL/Desktop/Connexion_google_facebook/Front/src/pages/signIn/SignIn.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Link, Navigate, useNavigate } from \"react-router-dom\";\r\nimport { GoogleLogin } from \"@react-oauth/google\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport FacebookLogin from \"react-facebook-login\";\r\n\r\nexport default function SignIn() {\r\n  const { signin, user, userFacebook, userGoogle } = useContext(AuthContext);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Email non valide\")\r\n      .required(\"Ce champ doit être saisi\"),\r\n    password: Yup.string()\r\n      .required(\"Required\")\r\n      .min(6, \"Le mot de passe doit contenir 6 caractères min.\"),\r\n  });\r\n\r\n  const initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    formState: { errors, isSubmitting },\r\n    setError,\r\n    clearErrors,\r\n  } = useForm({\r\n    initialValues,\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const submit = handleSubmit(async (values) => {\r\n    try {\r\n      clearErrors();\r\n      await signin(values);\r\n      navigate(\"/\");\r\n    } catch (message) {\r\n      setError(\"generic\", { type: \"generic\", message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * fonction qui est appelée lorsque la connexion avec Google réussit. \r\n   * Elle récupère le jeton d'authentification (googleToken), le décode en utilisant jwt_decode,\r\n   *  masque le bouton de connexion Google, stocke le décodage du jeton dans le stockage local\r\n   * et recharge la page pour mettre à jour l'état de l'authentification.\r\n   *\r\n   * @param {*} credentialResponse \r\n   */\r\n  const handleGoogleLoginSuccess = (credentialResponse) => {\r\n    let googleToken = credentialResponse.credential;\r\n    let decoded = jwt_decode(googleToken);\r\n    document.getElementById(\"signInGoogle\").hidden = true;\r\n    localStorage.setItem(\"userGoogle\", JSON.stringify(decoded));\r\n    window.location.reload();\r\n  };\r\n\r\n  const responseFacebook = (response) => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleGoogleLoginError = () => {\r\n    console.log(\"Login Failed\");\r\n  };\r\n\r\n  return (\r\n<></>\r\n\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}