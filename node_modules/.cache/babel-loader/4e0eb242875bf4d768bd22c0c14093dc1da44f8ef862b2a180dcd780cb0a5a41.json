{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PCD DELL\\\\Desktop\\\\Connexion_google_facebook\\\\Front\\\\src\\\\components\\\\Provider\\\\AuthProvider.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData } from \"react-router-dom\";\nimport { signin as login } from \"../../apis/auth\";\nimport { signout as logout } from \"../../apis/auth\";\nimport { AuthContext } from \"../../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AuthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const initialUser = useLoaderData();\n  const [user, setUser] = useState(initialUser);\n  const [userGoogle, setUserGoogle] = useState({});\n  const [userFacebook, setUserFacebook] = useState({});\n  console.log(userFacebook);\n  useEffect(() => {\n    /** @type {*} \r\n     * exécuté une fois, lors du montage initial du composant. \r\n     * Il récupère les données de l'utilisateur Google à partir du stockage local. \r\n     * Si des données sont présentes, elles sont analysées en tant qu'objet JSON à l'aide de JSON.parse() \r\n     * puis l'état userGoogle est mis à jour avec ces données.\r\n    */\n    const userGoogleData = localStorage.getItem(\"userGoogle\");\n    if (userGoogleData) {\n      const parsedData = JSON.parse(userGoogleData);\n      setUserGoogle(parsedData);\n    }\n  }, []);\n  useEffect(() => {\n    /** @type {*} on va chercher le token dans le stockage de session*/\n    const userFacebookData = localStorage.getItem(\"fblst_6447709785249838\");\n    /**\r\n     * Si il y a un token facebook on déclare une fonction asynchrone \r\n     * S'il y a un token fb, on effectue une requête à l'api Fk pour avoir les informations (ici mail, nom et photo) de l'utilisateur connecté\r\n     * On stocke ensuite ces données dans une variable d'état \"userFacebook\" qui les stockent dans un contexte local\r\n     */\n    const fetchData = async () => {\n      try {\n        if (userFacebookData) {\n          const response = await fetch(`https://graph.facebook.com/me?fields=email,name,picture&access_token=${userFacebookData}`);\n          if (response.ok) {\n            const data = await response.json();\n            setUserFacebook(data);\n          } else {\n            console.error(\"Erreur lors de la validation du token :\", response.statusText);\n          }\n        }\n      } catch (error) {\n        console.error(\"Une erreur s'est produite lors de la validation du token\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  async function signin(credentials) {\n    const newUser = await login(credentials);\n    setUser(newUser);\n  }\n  async function signout() {\n    await logout();\n    setUser(null);\n  }\n  async function signoutGoogle() {\n    localStorage.removeItem(\"userGoogle\"); //permet d'enlever le token google\n    setUserGoogle({});\n  }\n  async function signoutFacebook() {\n    localStorage.removeItem(\"fblst_6447709785249838\");\n    sessionStorage.removeItem(\"fbssls_6447709785249838\");\n    setUserFacebook({});\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      userGoogle,\n      user,\n      signin,\n      signout,\n      signoutGoogle,\n      userFacebook,\n      signoutFacebook\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n}\n_s(AuthProvider, \"YGzNBTuzW+K3MeR0/b8NPADa3/4=\", false, function () {\n  return [useLoaderData];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useEffect","useState","useLoaderData","signin","login","signout","logout","AuthContext","jsxDEV","_jsxDEV","AuthProvider","_ref","_s","children","initialUser","user","setUser","userGoogle","setUserGoogle","userFacebook","setUserFacebook","console","log","userGoogleData","localStorage","getItem","parsedData","JSON","parse","userFacebookData","fetchData","response","fetch","ok","data","json","error","statusText","credentials","newUser","signoutGoogle","removeItem","signoutFacebook","sessionStorage","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PCD DELL/Desktop/Connexion_google_facebook/Front/src/components/Provider/AuthProvider.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useLoaderData } from \"react-router-dom\";\r\nimport { signin as login } from \"../../apis/auth\";\r\nimport { signout as logout } from \"../../apis/auth\";\r\nimport { AuthContext } from \"../../context\";\r\n\r\n\r\nexport default function AuthProvider({ children }) {\r\n  const initialUser = useLoaderData();\r\n  const [user, setUser] = useState(initialUser);\r\n  const [userGoogle, setUserGoogle] = useState({});\r\n  const [userFacebook, setUserFacebook] = useState({});\r\n  console.log(userFacebook);\r\n\r\n  useEffect(() => {\r\n    /** @type {*} \r\n     * exécuté une fois, lors du montage initial du composant. \r\n     * Il récupère les données de l'utilisateur Google à partir du stockage local. \r\n     * Si des données sont présentes, elles sont analysées en tant qu'objet JSON à l'aide de JSON.parse() \r\n     * puis l'état userGoogle est mis à jour avec ces données.\r\n    */\r\n    const userGoogleData = localStorage.getItem(\"userGoogle\");\r\n    if (userGoogleData) {\r\n      const parsedData = JSON.parse(userGoogleData);\r\n      setUserGoogle(parsedData);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    /** @type {*} on va chercher le token dans le stockage de session*/\r\n    const userFacebookData = localStorage.getItem(\"fblst_6447709785249838\");\r\n    /**\r\n     * Si il y a un token facebook on déclare une fonction asynchrone \r\n     * S'il y a un token fb, on effectue une requête à l'api Fk pour avoir les informations (ici mail, nom et photo) de l'utilisateur connecté\r\n     * On stocke ensuite ces données dans une variable d'état \"userFacebook\" qui les stockent dans un contexte local\r\n     */\r\n    const fetchData = async () => {\r\n      try {\r\n        if (userFacebookData) {\r\n          const response = await fetch(\r\n            `https://graph.facebook.com/me?fields=email,name,picture&access_token=${userFacebookData}`\r\n          );\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setUserFacebook(data);\r\n          } else {\r\n            console.error(\r\n              \"Erreur lors de la validation du token :\",\r\n              response.statusText\r\n            );\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\r\n          \"Une erreur s'est produite lors de la validation du token\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function signin(credentials) {\r\n    const newUser = await login(credentials);\r\n    setUser(newUser);\r\n  }\r\n\r\n  async function signout() {\r\n    await logout();\r\n    setUser(null);\r\n  }\r\n\r\n  async function signoutGoogle() {\r\n    localStorage.removeItem(\"userGoogle\"); //permet d'enlever le token google\r\n    setUserGoogle({});\r\n  }\r\n\r\n  async function signoutFacebook() {\r\n    localStorage.removeItem(\"fblst_6447709785249838\");\r\n    sessionStorage.removeItem(\"fbssls_6447709785249838\");\r\n    setUserFacebook({});\r\n  }\r\n\r\n  return (\r\n\r\n      <AuthContext.Provider\r\n        value={{\r\n          userGoogle,\r\n          user,\r\n          signin,\r\n          signout,\r\n          signoutGoogle,\r\n          userFacebook,\r\n          signoutFacebook,\r\n        }}\r\n      >\r\n        {children}\r\n      </AuthContext.Provider>\r\n\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}